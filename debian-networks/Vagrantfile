# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. 
# Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "debian-minimal"

  # 
  # create several VM's and private networks
  #
  config.vm.define "vagrant-localhost" do |node|
    node.vm.hostname = "vagrant-localhost"

    node.vm.network "private_network", ip: "192.168.127.2"

    node.vm.provider "virtualbox" do |vb|
      # Boot with headless mode
      # Use VBoxManage to customize the VM(memory, cpu).
      vb.gui = false
      vb.customize ["modifyvm", :id, "--memory", "256", "--cpus", "1"]
    end

    node.vm.provision "puppet" do |puppet|
      puppet.manifests_path = "manifests"
      puppet.manifest_file  = "default.pp"
      puppet.options = ["--templatedir", "/vagrant/templates"]
    end
  end


  config.vm.define "dummy-server-1" do |node|
    node.vm.hostname = "dummy-server-1"

    node.vm.network "private_network", ip: "192.168.127.3"

    node.vm.provider "virtualbox" do |vb|
      # Boot with headless mode
      # Use VBoxManage to customize the VM(memory, cpu).
      vb.gui = false
      vb.customize ["modifyvm", :id, "--memory", "256", "--cpus", "1"]
    end

    node.vm.provision "puppet" do |puppet|
      puppet.manifests_path = "manifests"
      puppet.manifest_file  = "default.pp"
      puppet.options = ["--templatedir", "/vagrant/templates"]
    end
  end

  config.vm.define "dummy-server-2" do |node|
    node.vm.hostname = "dummy-server-2"

    node.vm.network "private_network", ip: "192.168.127.4"

    node.vm.provider "virtualbox" do |vb|
      # Boot with headless mode
      # Use VBoxManage to customize the VM(memory, cpu).
      vb.gui = false
      vb.customize ["modifyvm", :id, "--memory", "256", "--cpus", "1"]
    end

    node.vm.provision "puppet" do |puppet|
      puppet.manifests_path = "manifests"
      puppet.manifest_file  = "default.pp"
      puppet.options = ["--templatedir", "/vagrant/templates"]
    end
  end

end
